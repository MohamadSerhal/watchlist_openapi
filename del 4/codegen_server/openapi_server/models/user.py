# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, watchlist=None, full_name=None, hashed_pass=None, username=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param watchlist: The watchlist of this User.  # noqa: E501
        :type watchlist: List[str]
        :param full_name: The full_name of this User.  # noqa: E501
        :type full_name: str
        :param hashed_pass: The hashed_pass of this User.  # noqa: E501
        :type hashed_pass: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'watchlist': List[str],
            'full_name': str,
            'hashed_pass': str,
            'username': str
        }

        self.attribute_map = {
            'watchlist': 'watchlist',
            'full_name': 'full_name',
            'hashed_pass': 'hashed_pass',
            'username': 'username'
        }

        self._watchlist = watchlist
        self._full_name = full_name
        self._hashed_pass = hashed_pass
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def watchlist(self):
        """Gets the watchlist of this User.


        :return: The watchlist of this User.
        :rtype: List[str]
        """
        return self._watchlist

    @watchlist.setter
    def watchlist(self, watchlist):
        """Sets the watchlist of this User.


        :param watchlist: The watchlist of this User.
        :type watchlist: List[str]
        """

        self._watchlist = watchlist

    @property
    def full_name(self):
        """Gets the full_name of this User.


        :return: The full_name of this User.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.


        :param full_name: The full_name of this User.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def hashed_pass(self):
        """Gets the hashed_pass of this User.


        :return: The hashed_pass of this User.
        :rtype: str
        """
        return self._hashed_pass

    @hashed_pass.setter
    def hashed_pass(self, hashed_pass):
        """Sets the hashed_pass of this User.


        :param hashed_pass: The hashed_pass of this User.
        :type hashed_pass: str
        """
        if hashed_pass is None:
            raise ValueError("Invalid value for `hashed_pass`, must not be `None`")  # noqa: E501

        self._hashed_pass = hashed_pass

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
