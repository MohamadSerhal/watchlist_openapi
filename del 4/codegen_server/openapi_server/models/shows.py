# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Shows(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, genre=None, rating=None, rating_number=None, type=None, episodes_num=None):  # noqa: E501
        """Shows - a model defined in OpenAPI

        :param name: The name of this Shows.  # noqa: E501
        :type name: str
        :param genre: The genre of this Shows.  # noqa: E501
        :type genre: str
        :param rating: The rating of this Shows.  # noqa: E501
        :type rating: float
        :param rating_number: The rating_number of this Shows.  # noqa: E501
        :type rating_number: int
        :param type: The type of this Shows.  # noqa: E501
        :type type: str
        :param episodes_num: The episodes_num of this Shows.  # noqa: E501
        :type episodes_num: int
        """
        self.openapi_types = {
            'name': str,
            'genre': str,
            'rating': float,
            'rating_number': int,
            'type': str,
            'episodes_num': int
        }

        self.attribute_map = {
            'name': 'name',
            'genre': 'genre',
            'rating': 'rating',
            'rating_number': 'rating_number',
            'type': 'type',
            'episodes_num': 'episodes_num'
        }

        self._name = name
        self._genre = genre
        self._rating = rating
        self._rating_number = rating_number
        self._type = type
        self._episodes_num = episodes_num

    @classmethod
    def from_dict(cls, dikt) -> 'Shows':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Shows of this Shows.  # noqa: E501
        :rtype: Shows
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Shows.


        :return: The name of this Shows.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Shows.


        :param name: The name of this Shows.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def genre(self):
        """Gets the genre of this Shows.


        :return: The genre of this Shows.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this Shows.


        :param genre: The genre of this Shows.
        :type genre: str
        """

        self._genre = genre

    @property
    def rating(self):
        """Gets the rating of this Shows.


        :return: The rating of this Shows.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Shows.


        :param rating: The rating of this Shows.
        :type rating: float
        """

        self._rating = rating

    @property
    def rating_number(self):
        """Gets the rating_number of this Shows.


        :return: The rating_number of this Shows.
        :rtype: int
        """
        return self._rating_number

    @rating_number.setter
    def rating_number(self, rating_number):
        """Sets the rating_number of this Shows.


        :param rating_number: The rating_number of this Shows.
        :type rating_number: int
        """

        self._rating_number = rating_number

    @property
    def type(self):
        """Gets the type of this Shows.


        :return: The type of this Shows.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Shows.


        :param type: The type of this Shows.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def episodes_num(self):
        """Gets the episodes_num of this Shows.


        :return: The episodes_num of this Shows.
        :rtype: int
        """
        return self._episodes_num

    @episodes_num.setter
    def episodes_num(self, episodes_num):
        """Sets the episodes_num of this Shows.


        :param episodes_num: The episodes_num of this Shows.
        :type episodes_num: int
        """

        self._episodes_num = episodes_num
