# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ShowRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, show_id=None, rating=None):  # noqa: E501
        """ShowRating - a model defined in OpenAPI

        :param show_id: The show_id of this ShowRating.  # noqa: E501
        :type show_id: str
        :param rating: The rating of this ShowRating.  # noqa: E501
        :type rating: int
        """
        self.openapi_types = {
            'show_id': str,
            'rating': int
        }

        self.attribute_map = {
            'show_id': 'show_id',
            'rating': 'rating'
        }

        self._show_id = show_id
        self._rating = rating

    @classmethod
    def from_dict(cls, dikt) -> 'ShowRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The showRating of this ShowRating.  # noqa: E501
        :rtype: ShowRating
        """
        return util.deserialize_model(dikt, cls)

    @property
    def show_id(self):
        """Gets the show_id of this ShowRating.


        :return: The show_id of this ShowRating.
        :rtype: str
        """
        return self._show_id

    @show_id.setter
    def show_id(self, show_id):
        """Sets the show_id of this ShowRating.


        :param show_id: The show_id of this ShowRating.
        :type show_id: str
        """
        if show_id is None:
            raise ValueError("Invalid value for `show_id`, must not be `None`")  # noqa: E501

        self._show_id = show_id

    @property
    def rating(self):
        """Gets the rating of this ShowRating.


        :return: The rating of this ShowRating.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this ShowRating.


        :param rating: The rating of this ShowRating.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating
